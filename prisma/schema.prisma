// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

enum VideoStatus {
  PLANNING
  RECORDING
  EDITING
  PUBLISHED
}

enum TaskPhase {
  PLANNING
  RECORDING
  EDITING
  THUMBNAIL
  METADATA
  DISTRIBUTION
}

model VideoIdea {
  id           String      @id @default(uuid())
  title        String
  description  String?
  script       String?
  metadata     Json?
  thumbnailUrl String?
  plannedDate  DateTime
  finishDate   DateTime?
  status       VideoStatus @default(PLANNING)
  isUploaded   Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  tasks        Task[]
  excuseUses   ExcuseUse[]
  topics       Topic[]     @relation("TopicToVideoIdea")
}

model Task {
  id          String    @id @default(uuid())
  title       String
  completed   Boolean   @default(false)
  phase       TaskPhase
  order       Int
  notes       String?
  videoId     String
  video       VideoIdea @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Topic {
  id         String      @id @default(uuid())
  name       String
  isTrending Boolean     @default(false)
  trendScore Float?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  videoIdeas VideoIdea[] @relation("TopicToVideoIdea")
}

model Excuse {
  id        String      @id @default(uuid())
  text      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  uses      ExcuseUse[]
}

model ExcuseUse {
  id          String    @id @default(uuid())
  excuseId    String
  videoIdeaId String
  createdAt   DateTime  @default(now())
  videoIdea   VideoIdea @relation(fields: [videoIdeaId], references: [id], onDelete: Cascade)
  excuse      Excuse    @relation(fields: [excuseId], references: [id], onDelete: Cascade)
}
